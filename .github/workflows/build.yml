name: Deploy To Self Managed Cluster

on:
  workflow_dispatch:
  #push:
    #branches:
      #- recette
  pull_request:
    types: [closed]
    branches:
      - recette


permissions:
  contents: read
  actions: write
  pull-requests: write
  issues: write
  id-token: write
  security-events: write
  packages: write

env:
  CACHE_KEY: ${{ github.sha }}
  IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v9
  OPENVAS_PASSWORD: ${{ secrets.OPENVAS_PASSWORD }}
  KUBECONFIG_PATH: ${{ github.workspace }}/kubeconfig_self_managed.yaml
  # ARGOCD_APP:  myapp-argo-application
  # ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  # ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
  # ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
jobs:
  docker-build:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for Dockerfile changes
        id: changed-dockerfile
        uses: tj-actions/changed-files@v42
        with:
          files: Dockerfile

      - name: Skip if no Dockerfile changes
        if: steps.changed-dockerfile.outputs.any_changed != 'true'
        run: |
          echo "No changes in Dockerfile — skipping build."
          exit 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          no-cache: true
          cache-to: type=inline

      - name: Set image tag output
        id: set-tag
        run: echo "image-tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT


      - name: Check build before scanning
        run: |
          if [ "${{ steps.build.outcome }}" != "success" ]; then
            echo "Build failed — skipping scan."
            exit 0
          fi

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload SARIF file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif-report
          path: trivy-results.sarif


  extract-url:
    #if: github.event_name == 'push'
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    #needs: docker-build
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Wait for ArgoCD deployment to finish
        run: |
          echo "Waiting 30 seconds for ArgoCD to sync and deploy..."
          sleep 30

      - name: Wait for elgg-app to be ready on masternode
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.MASTER_SSH_IP }}
          username: ${{ secrets.MASTER_SSH_USER }}
          key: ${{ secrets.MASTER_SSH_PRIVATE_KEY }}
          script: |
            PORT=$(kubectl get svc elgg-app -n recette -o jsonpath='{.spec.ports[0].nodePort}')
            URL="http://74.234.50.122:$PORT"
            echo "Waiting for $URL to be ready..."
            for i in $(seq 1 15); do
              if curl -sf $URL > /dev/null; then
                echo "Service is ready!"
                exit 0
              fi
              echo "Attempt $i: Service not ready yet, waiting 10s..."
              sleep 10
            done
            echo "Service did not become ready in time."
            exit 1
  
      - name: Extract NodePort and write to file
        run: |
          PORT=$(ssh ${{ secrets.MASTER_SSH_USER }}@${{ secrets.MASTER_SSH_IP }} "kubectl get svc elgg-app -n recette -o jsonpath='{.spec.ports[0].nodePort}'")
          echo "http://74.234.50.122:$PORT" > elgg-url.txt
  
      - name: Upload elgg-url artifact
        uses: actions/upload-artifact@v4
        with:
          name: elgg-url-artifact
          path: elgg-url.txt

  security-scan:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    needs: extract-url
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
  
    steps:
      - name: Download elgg-url artifact
        uses: actions/download-artifact@v4
        with:
          name: elgg-url-artifact
  
      - name: Load elgg-url into environment
        run: |
          echo "elgg-url=$(cat elgg-url.txt)" >> $GITHUB_ENV
  
      - name: Run Quick Security Scan (ZAP)
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: ${{ env.elgg-url }}
          cmd_options: '-T 5 -z "-config api.disablekey=true"'
          fail_action: false
          allow_issue_writing: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZAP_LOG_LEVEL: DEBUG
  
      - name: Upload ZAP Scan Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-report
          path: |
            report_html.html
            report_json.json
            report_md.md
          if-no-files-found: error
          

  quality-gate:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    needs: security-scan
    runs-on: [self-hosted, Linux, X64]
    permissions:
      contents: read
      pull-requests: write
    outputs:
      gate-passed: ${{ steps.evaluate.outputs.gate-passed }}
    steps:
      - name: Download ZAP scan report
        uses: actions/download-artifact@v4
        with:
          name: security-scan-report

      - name: Check risks
        id: risk-check
        run: |
          HIGH=$(jq '[.site[0].alerts[] | select(.riskcode == "3")] | length' report_json.json || echo 0)
          MEDIUM=$(jq '[.site[0].alerts[] | select(.riskcode == "2")] | length' report_json.json || echo 0)
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT

      - name: Evaluate gate
        id: evaluate
        run: |
          if [ ${{ steps.risk-check.outputs.high }} -gt 0 ]; then
            echo "❌ BLOCKED: High-risk vulnerabilities detected"
            echo "gate-passed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ ${{ steps.risk-check.outputs.medium }} -gt 3 ]; then
            echo "⚠️ WARNING: Too many medium-risk issues"
            echo "gate-passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Quality gate passed"
            echo "gate-passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup test namespace
        run: |
          ssh ${{ secrets.MASTER_SSH_USER }}@${{ secrets.MASTER_SSH_IP }} << 'EOF'
            kubectl delete all --all -n recette || true
            kubectl delete pvc --all -n recette || true
            kubectl delete secrets --all -n recette || true
          EOF
          sleep 20
